class Solution
{
public:
	vector<int> temp;	
	string line;	
	bool res=false;		

	void locate(vector<vector<char>> board, char c, vector<vector<bool>>& visited)
	{
		for (int i = 0; i < board.size(); i++)
		{
			for (int j = 0; j < board[i].size(); j++)
			{
				if (c!=board[i][j] || visited[i][j])
					continue;
				else
				{
					temp.push_back(i);
					temp.push_back(j);
				}
			}
		}
		return;
	}

	void DFS(vector<vector<char>>& board, int c, vector<vector<bool>>& visited, int row, int col)
	{
		if (res == true)	
			return;
		if (c == line.size())
		{
			res = true;
			return;
		}
		if (row > board.size() - 1 || col > board[0].size() - 1 || row < 0 || col < 0 || visited[row][col]) 
			return;
		if (line[c] != board[row][col])	
			return;


		if (line[c] == board[row][col] && !visited[row][col])	
		{
			visited[row][col] = true;
			DFS(board, c + 1, visited, row - 1, col);
			DFS(board, c+1, visited, row + 1, col); 	
			DFS(board, c+1, visited, row, col + 1);
			DFS(board, c+1, visited, row, col - 1);
			visited[row][col] = false;
		}
	}

	bool exist(vector<vector<char>>& board, string word)
	{
		line = word;
		vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
		locate(board,word[0],visited);
		for (int i = 0; i < temp.size() / 2; i++)
		{
			DFS(board, 0, visited, temp[0 + i * 2], temp[1 + i * 2]);
		}
		
		return res;
	}
};